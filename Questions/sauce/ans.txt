1. F. Line 5 does not compile. This question is checking to
see whether you are paying attention to the types.
numFish is an int, and 1 is an int. Therefore, we use
numeric addition and get 5. The problem is that we
can’t store an int in a String variable. Suppose line 5
said String anotherFish = numFish + 1 + "";. In that case,
the answers would be option A and option C. The
variable defined on line 5 would be the string "5", and
both output statements would use concatenation.
2. C, E, F. Option C uses the variable name as if it were a
type, which is clearly illegal. Options E and F don’t
specify any size. Although it is legal to leave out the
size for later dimensions of an array of arrays, the first
one is required. Option A declares a legal 2D array.
Option B declares a legal 3D array. Option D declares a
legal 2D array. Remember that it is normal to see
classes on the exam you might not have learned. You
aren’t expected to know anything about them.
3. A, C, D. Option B throws an exception because there is
no March 40. Option E also throws an exception
because 2029 isn’t a leap year and therefore has no
February 29. Option F doesn’t compile because the
enum should be named Month, rather than MonthEnum.
Option D is correct because it is just a regular date and
has nothing to do with daylight saving time. Options A
and C are correct because Java is smart enough to
adjust for daylight saving time.
4. A, C, D. The code compiles fine. Line 3 points to the
String in the string pool. Line 4 calls the String
constructor explicitly and is therefore a different object
than s. Line 5 checks for object equality, which is true,and so it prints one. Line 6 uses object reference
equality, which is not true since we have different
objects. Line 7 calls intern(), which returns the value
from the string pool and is therefore the same
reference as s. Line 8 also compares references but is
true since both references point to the object from the
string pool. Finally, line 9 is a trick. The string Hello is
already in the string pool, so calling intern() does not
change anything. The reference t is a different object,
so the result is still false. Therefore, options A, C, and D
are correct.
5. B. This example uses method chaining. After the call to
append(), sb contains "aaa". That result is passed to the
first insert() call, which inserts at index 1. At this point,
sb contains abbaa. That result is passed to the final
insert(), which inserts at index 4, resulting in abbaccca.
Therefore, option B is the answer.
6. C. Remember to watch return types on math
operations. One of the tricks is line 24. The round()
method returns an int when called with a float.
However, we are calling it with a double, so it returns a
long. The other trick is line 25. The random() method
returns a double. Since two lines have a compiler error,
option C is the answer.
7. A, E. When dealing with time zones, it is best to convert
to GMT first by subtracting the time zone. Remember
that subtracting a negative is like adding. The first
date/time is 9:00 GMT, and the second is 15:00 GMT.
Therefore, the first one is earlier by six hours.
Therefore, options A and E are correct.
8. A, B, F. Remember that indexes are zero-based, which
means index 4 corresponds to 5, and option A is
correct. For option B, the replace() method starts the
replacement at index 2 and ends before index 4. Thismeans two characters are replaced, and charAt(3) is
called on the intermediate value of 1265. The character
at index 3 is 5, making option B correct. Option C is
similar, making the intermediate value 126 and
returning 6.
Option D results in an exception since there is no
character at index 5. Option E is incorrect. It does not
compile because the parentheses for the length()
method are missing. Finally, option F’s replace results
in the intermediate value 145. The character at index 2
is 5, so option F is correct.
9. A, C, F. Arrays are zero-indexed, making option A
correct and option B incorrect. They are not able to
change size, which is option C. The values can be
changed, making option D incorrect. An array does not
override equals(), so it uses object equality. Since two
different objects are not equal, option F is correct, and
options E and G are incorrect.
10. A. All of these lines compile. The min() and floor()
methods return the same type passed in: int and double,
respectively. The round() method returns a long when
called with a double. Option A is correct since the code
compiles.
11. E. A LocalDate does not have a time element. Therefore,
there is no method to add hours, making option E the
answer.
12. A, D, E. First, notice that the indent() call adds a blank
space to the beginning of numbers, and stripLeading()
immediately removes it. The substring() method has two
forms. The first takes the index to start with and the
index to stop immediately before. The second takes just
the index to start with and goes to the end of the String.
Remember that indexes are zero-based. The first callstarts at index 1 and ends with index 2 since it needs to
stop before index 3. This gives us option A. The second
call starts at index 7 and ends in the same place,
resulting in an empty String, which is option E. This
prints out a blank line. The final call starts at index 7
and goes to the end of the String finishing up with
option D.
13. B. A String is immutable. Calling concat() returns a new
String but does not change the original. A StringBuilder
is mutable. Calling append() adds characters to the
existing character sequence along with returning a
reference to the same object. Therefore, option B is
correct.
14. B, F. Options A and C are incorrect because there is no
asTime() or withTime() method defined on LocalDate.
Option B correctly creates a LocalDateTime from a
LocalDate and LocalTime. Option E is incorrect because
Instant, like other date/time classes, does not have a
public constructor and is instantiated via methods.
Option F is the proper conversion. Option D is incorrect
because the source object does not represent a point in
time. Without a time zone, Java doesn’t know what
moment in time to use for the Instant.
15. C, E. Numbers sort before letters, and uppercase sorts
before lowercase. This makes option C one of the
answers. The binarySearch() method looks at where a
value would be inserted, which is before the second
element for Pippa. It then negates it and subtracts one,
which is option E.
16. A, G. The substring() method includes the starting index
but not the ending index. When called with 1 and 2, it
returns a single-character String, making option A
correct and option E incorrect. Calling substring() with
2 as both parameters is legal. It returns an emptyString, making options B and F incorrect. Java does not
allow the indexes to be specified in reverse order.
Option G is correct because it throws a
StringIndexOutOfBoundsException. Finally, option H is
incorrect because it returns an empty String.
17. C, F. This question is tricky because it has several
parts. First, you have to know that the text block on
lines 13 and 14 is equivalent to a regular String. Since
there is no line break at the end, this is four characters.
Then, you have to know that String objects are
immutable, which means the results of lines 17–19 are
ignored. Finally, on line 20, something happens. We
concatenate three new characters to s1 and now have a
String of length 7, making option C correct.
Next, s2 += 2 expands to s2 = s2 + 2. A String
concatenated with any other type gives a String. Lines
22, 23, and 24 all append to s2, giving a result of
"2cfalse". The if statement on line 27 returns true
because the values of the two String objects are the
same using object equality. For this reason, option F is
correct. The if statement on line 26 returns false
because the two String objects are not the same in
memory. One comes directly from the string pool, and
the other comes from building using String operations.
18. A, B, D. The compare() method returns a positive integer
when the arrays are different and the first is larger.
This is the case for option A since the s2 element at
index 1 comes first alphabetically. It is not the case for
option C because the s4 is longer or for option E
because the arrays are the same.
The mismatch() method returns a positive integer when
the arrays are different in a position index 1 or greater.
This is the case for options B and D since the differenceis at index 1. It is not the case for option F because
there is no difference.
19. A, D. The dateTime1 object has a time of 1:30 per
initialization. The dateTime2 object is an hour later.
However, there is no 2:30 when springing ahead,
setting the time to 3:30. Option A is correct because it
is an hour later. Option D is also correct because the
hour of the new time is 3. Option E is not correct
because we have changed the time zone offset due to
daylight saving time.
20. A, C. The reverse() method is the easiest way of
reversing the characters in a StringBuilder; therefore,
option A is correct. In option B, substring() returns a
String, which is not stored anywhere. Option C uses
method chaining. First, it creates the value "JavavaJ$".
Then, it removes the first three characters, resulting in
"avaJ$". Finally, it removes the last character, resulting
in "avaJ". Option D throws an exception because you
cannot delete the character after the last index.
Remember that deleteCharAt() uses indexes that are
zero-based, and length() counts the number of
characters rather than the index.
21. A. The date starts out as April 30, 2025. Since dates are
immutable and the plus methods’ return values are
ignored, the result is unchanged. Therefore, option A is
correct.
22. E. The code first creates a date of 2025-10-31. The
chaining in the output is valid resulting in interim
states of 2026-10-31, followed by 2026-05-31, then 2026-06-
30, then 2026-06-30, and finally the result of 2026-06-
30T13:04.