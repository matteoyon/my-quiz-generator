[
  {
    "id": 1001,
    "question": "1. What could be the output of the following?\nvar stream = Stream.iterate(\"\", (s) -> s + \"1\");\nSystem.out.println(stream.limit(2).map(x -> x + \"2\"));\nA. 12112\nB. 212\nC. 212112\nD. java.util.stream.ReferencePipeline$3@4517d9a3\nE. The code does not compile.\nF. An exception is thrown.\nG. The code hangs.",
    "options": [
      "A. 12112",
      "B. 212",
      "C. 212112",
      "D. java.util.stream.ReferencePipeline$3@4517d9a3",
      "E. The code does not compile.",
      "F. An exception is thrown.",
      "G. The code hangs."
    ],
    "answer": [
      "D"
    ],
    "explanation": "1. D. No terminal operation is called, so the stream never executes. The first line creates an infinite stream reference. If the stream were executed on the second line, it would get the first two elements from that infinite stream, \"\" and \"1\", and add an extra character, resulting in \"2\" and \"12\", respectively. Since the stream is not executed, the reference is printed instead, giving us option D."
  },
  {
    "id": 1002,
    "question": "2. What could be the output of the following?\nPredicate<String> predicate = s -> s.startsWith(\"g\");\nvar stream1 = Stream.generate(() -> \"growl!\");\nvar stream2 = Stream.generate(() -> \"growl!\");\nvar b1 = stream1.anyMatch(predicate);\nvar b2 = stream2.allMatch(predicate);\nSystem.out.println(b1 + \" \" + b2);\nA. true false\nB. true true\nC. java.util.stream.ReferencePipeline$3@4517d9a3\nD. The code does not compile.\nE. An exception is thrown.\nF. The code hangs.",
    "options": [
      "A. true false",
      "B. true true",
      "C. java.util.stream.ReferencePipeline$3@4517d9a3",
      "D. The code does not compile.",
      "E. An exception is thrown.",
      "F. The code hangs."
    ],
    "answer": [
      "F"
    ],
    "explanation": "2. F. Both streams created in this code snippet are infinite streams. The variable b1 is set to true since anyMatch() terminates. Even though the stream is infinite, Java finds a match on the first element and stops looking. However, when allMatch() runs, it needs to keep going until the end of the stream since it keeps finding matches. Since all elements continue to match, the program hangs, making option F the answer."
  },
  {
    "id": 1003,
    "question": "3. What could be the output of the following?\nPredicate<String> predicate = s -> s.length()> 3;\nvar stream = Stream.iterate(\"-\",\n    s -> ! s.isEmpty(), (s) -> s + s);\nvar b1 = stream.noneMatch(predicate);\nvar b2 = stream.anyMatch(predicate);\nSystem.out.println(b1 + \" \" + b2);\nA. false false\nB. false true\nC. java.util.stream.ReferencePipeline$3@4517d9a3\nD. The code does not compile.\nE. An exception is thrown.\nF. The code hangs.",
    "options": [
      "A. false false",
      "B. false true",
      "C. java.util.stream.ReferencePipeline$3@4517d9a3",
      "D. The code does not compile.",
      "E. An exception is thrown.",
      "F. The code hangs."
    ],
    "answer": [
      "E"
    ],
    "explanation": "3. E. An infinite stream is generated where each element is twice as long as the previous one. While this code uses the three-parameter iterate() method, the condition is never false. The variable b1 is set to false because Java finds an element that matches when it gets to the element of length 4. However, the next line tries to operate on the same stream. Since streams can be used only once, this throws an exception that the \"stream has already been operated upon or closed,\" making option E the answer. If two different streams were used, the result would be different."
  },
  {
    "id": 1004,
    "question": "4. Which are true statements about terminal operations in a stream that runs successfully? (Choose all that apply.)\nA. At most one terminal operation can exist in a stream pipeline.\nB. Terminal operations are a required part of the stream pipeline in order to get a result.\nC. Terminal operations have Stream as the return type.\nD. The peek() method is an example of a terminal operation.\nE. The referenced Stream may be used after calling a terminal operation.",
    "options": [
      "A. At most one terminal operation can exist in a stream pipeline.",
      "B. Terminal operations are a required part of the stream pipeline in order to get a result.",
      "C. Terminal operations have Stream as the return type.",
      "D. The peek() method is an example of a terminal operation.",
      "E. The referenced Stream may be used after calling a terminal operation."
    ],
    "answer": [
      "A",
      "B"
    ],
    "explanation": "4. A, B. Terminal operations are the final step in a stream pipeline. Exactly one is required, because it triggers the execution of the entire stream pipeline. Therefore, options A and B are correct. Option C is true of intermediate operations rather than terminal operations. Option D is incorrect because peek() is an intermediate operation. Finally, option E is incorrect because once a stream pipeline is run, the Stream is marked invalid."
  },
  {
    "id": 1005,
    "question": "5. Which of the following sets result to 8.0? (Choose all that apply.)\nA.\ndouble result = LongStream.of(6L, 8L, 10L)\n    .mapToInt(x -> (int) x)\n    .collect(Collectors.groupingBy(x -> x))\n    .keySet()\n    .stream()\n    .collect(Collectors.averagingInt(x -> x));\nB.\ndouble result = LongStream.of(6L, 8L, 10L)\n    .mapToInt(x -> x)\n    .boxed()\n    .collect(Collectors.groupingBy(x -> x))\n    .keySet()\n    .stream()\n    .collect(Collectors.averagingInt(x -> x));\nC.\ndouble result = LongStream.of(6L, 8L, 10L)\n    .mapToInt(x -> (int) x)\n    .boxed()\n    .collect(Collectors.groupingBy(x -> x))\n    .keySet()\n    .stream()\n    .collect(Collectors.averagingInt(x -> x));\nD.\ndouble result = LongStream.of(6L, 8L, 10L)\n    .mapToInt(x -> (int) x)\n    .collect(Collectors.groupingBy(x -> x, Collectors.toSet()))\n    .keySet()\n    .stream()\n    .collect(Collectors.averagingInt(x -> x));\nE.\ndouble result = LongStream.of(6L, 8L, 10L)\n    .mapToInt(x -> x)\n    .boxed()\n    .collect(Collectors.groupingBy(x -> x, Collectors.toSet()))\n    .keySet()\n    .stream()\n    .collect(Collectors.averagingInt(x -> x));\nF.\ndouble result = LongStream.of(6L, 8L, 10L)\n    .mapToInt(x -> (int) x)\n    .boxed()\n    .collect(Collectors.groupingBy(x -> x, Collectors.toSet()))\n    .keySet()\n    .stream()\n    .collect(Collectors.averagingInt(x -> x));",
    "options": [
      "A. (as shown in A)",
      "B. (as shown in B)",
      "C. (as shown in C)",
      "D. (as shown in D)",
      "E. (as shown in E)",
      "F. (as shown in F)"
    ],
    "answer": [
      "C",
      "F"
    ],
    "explanation": "5. C, F. Options B and E are incorrect because they do not cast the long to an int, resulting in a compiler error on the mapToInt() calls. Options A and D are incorrect because they are missing boxed() before the collect() call. Option F specifies the type of Collection, which is allowed. Both options C and F are correct."
  },
  {
    "id": 1006,
    "question": "6. Which of the following methods can fill in the blank so that the code prints out false?\nvar s = Stream.generate(() -> \"meow\");\nvar match = s.__________(String::isEmpty);\nSystem.out.println(match);\nA. Only allMatch\nB. Only anyMatch\nC. Only noneMatch\nD. Both allMatch and anyMatch\nE. Both allMatch and noneMatch\nF. None of the above",
    "options": [
      "A. Only allMatch",
      "B. Only anyMatch",
      "C. Only noneMatch",
      "D. Both allMatch and anyMatch",
      "E. Both allMatch and noneMatch",
      "F. None of the above"
    ],
    "answer": [
      "A"
    ],
    "explanation": "6. A. The anyMatch() and noneMatch() methods run infinitely on an infinite stream. Only allMatch() makes it safe to return false as soon as one element does not match, so option A is correct."
  },
  {
    "id": 1007,
    "question": "7. We have a method that returns a sorted list without changing the original. We want to rewrite it. Which of the following pairs can fill in the blanks in refactored() to do the same with streams?\nprivate static List<String> sort(List<String> list) {\n    var copy = new ArrayList<String>(list);\n    Collections.sort(copy, (a, b) -> b.compareTo(a));\n    return copy;\n}\nprivate static List<String> refactored(List<String> list) {\n    return list.stream()\n            ._______((a, b) -> b.compareTo(a))\n            .__________;\n}\nA. compare and toList()\nB. compare and sort()\nC. compareTo and toList()\nD. compareTo and sort()\nE. sorted and collect()\nF. sorted and collect(Collectors.toList())",
    "options": [
      "A. compare and toList()",
      "B. compare and sort()",
      "C. compareTo and toList()",
      "D. compareTo and sort()",
      "E. sorted and collect()",
      "F. sorted and collect(Collectors.toList())"
    ],
    "answer": [
      "F"
    ],
    "explanation": "7. F. There is no Stream<T> method called compare() or compareTo(), so the sorted() method is correct to order the stream, and collect(Collectors.toList()) returns the sorted list. Therefore, option F is correct."
  },
  {
    "id": 1008,
    "question": "8. Which of the following are true given this declaration? (Choose all that apply.)\nvar is = IntStream.empty();\nA. is.average() returns the type int.\nB. is.average() returns the type OptionalInt.\nC. is.findAny() returns the type int.\nD. is.findAny() returns the type OptionalInt.\nE. is.sum() returns the type int.\nF. is.sum() returns the type OptionalInt.",
    "options": [
      "A. is.average() returns the type int.",
      "B. is.average() returns the type OptionalInt.",
      "C. is.findAny() returns the type int.",
      "D. is.findAny() returns the type OptionalInt.",
      "E. is.sum() returns the type int.",
      "F. is.sum() returns the type OptionalInt."
    ],
    "answer": [
      "D",
      "E"
    ],
    "explanation": "8. D, E. The average() method returns an OptionalDouble, so neither A nor B is correct. The findAny() method returns an OptionalInt, making D correct. The sum() method returns an int (with an empty stream summing to 0), making E correct."
  },
  {
    "id": 1009,
    "question": "9. Which of the following can we add after line 6 for the code to run without error and not produce any output? (Choose all that apply.)\n4: var stream = LongStream.of(1, 2, 3);\n5: var opt = stream.map(n -> n * 10)\n6:\n    .filter(n -> n < 5).findFirst();\nA. \nif (opt.isPresent())\n    System.out.println(opt.get());\nB. \nif (opt.isPresent())\n    System.out.println(opt.getAsLong());\nC. opt.ifPresent(System.out.println);\nD. opt.ifPresent(System.out::println);\nE. None of these; the code does not compile.\nF. None of these; line 6 throws an exception at runtime.",
    "options": [
      "A. if (opt.isPresent()) System.out.println(opt.get());",
      "B. if (opt.isPresent()) System.out.println(opt.getAsLong());",
      "C. opt.ifPresent(System.out.println);",
      "D. opt.ifPresent(System.out::println);",
      "E. None of these; the code does not compile.",
      "F. None of these; line 6 throws an exception at runtime."
    ],
    "answer": [
      "B",
      "D"
    ],
    "explanation": "9. B, D. The code uses a LongStream, so getAsLong() is required to retrieve the value. Both options B and D compile and run without error, but produce no output since the filter results in an empty Optional."
  },
  {
    "id": 1010,
    "question": "10. Given the four statements (L, M, N, O), select the order that would cause the code to output 10 lines.\nStream.generate(() -> \"1\")\nL: .filter(x -> x.length()> 1)\nM: .forEach(System.out::println)\nN: .limit(10)\nO: .peek(System.out::println)\n;\nA. L, N\nB. L, N, O\nC. L, N, M\nD. L, N, M, O\nE. L, O, M\nF. N, M\nG. N, O",
    "options": [
      "A. L, N",
      "B. L, N, O",
      "C. L, N, M",
      "D. L, N, M, O",
      "E. L, O, M",
      "F. N, M",
      "G. N, O"
    ],
    "answer": [
      "F"
    ],
    "explanation": "10. F. Only one of the method calls, forEach(), is a terminal operation; therefore, only if limit(10) directly precedes forEach() will the stream process 10 elements. Option F is correct."
  },
  {
    "id": 1011,
    "question": "11. What changes need to be made together for this code to print the string 12345? (Choose all that apply.)\nStream.iterate(1, x -> x++)\n.limit(5).map(x -> x)\n.collect(Collectors.joining());",
    "options": [
      "A. Changing Collectors.joining() to Collectors.joining(\",\")",
      "B. Changing map(x -> x) to map(x -> \"\" + x)",
      "C. Changing x -> x++ to x -> ++x",
      "D. Adding .forEach(System.out::print) after the call to collect()",
      "E. Wrapping the entire line in a System.out.print statement",
      "F. None of the above; the code already prints 12345"
    ],
    "answer": [
      "B",
      "C",
      "E"
    ],
    "explanation": "11. B, C, E. As written, the code doesn’t compile because the Collectors.joining() expects to get a Stream<String>. Option B fixes this, at which point nothing is output because the collector creates a String without outputting the result. Option E fixes this and causes the output to be 11111. Since the post-increment operator is used, the stream contains an infinite number of the character 1. Option C fixes this and causes the stream to contain increasing numbers."
  },
  {
    "id": 1012,
    "question": "12. Which is true of the following code?\nSet<String> birds = Set.of(\"oriole\", \"flamingo\");\nStream.concat(birds.stream(), birds.stream(), birds.stream())\n.sorted()\n// line X\n.distinct()\n.findAny()\n.ifPresent(System.out::println);",
    "options": [
      "A. It is guaranteed to print flamingo as is and when line X is removed.",
      "B. It is guaranteed to print oriole as is and when line X is removed.",
      "C. It is guaranteed to print flamingo as is, but not when line X is removed.",
      "D. It is guaranteed to print oriole as is, but not when line X is removed.",
      "E. The output may vary as is.",
      "F. The code does not compile.",
      "G. It throws an exception because the same list is used as the source for multiple streams."
    ],
    "answer": [
      "F"
    ],
    "explanation": "12. F. The code does not compile because Stream.concat() takes two parameters, not the three provided. This makes the answer option F."
  },
  {
    "id": 1013,
    "question": "13. Which of the following is true?\nList<Integer> x1 = List.of(1, 2, 3);\nList<Integer> x2 = List.of(4, 5, 6);\nList<Integer> x3 = List.of();\nStream.of(x1, x2, x3).map(x -> x + 1)\n.flatMap(x -> x.stream())\n.forEach(System.out::print);",
    "options": [
      "A. The code compiles and prints 123456.",
      "B. The code compiles and prints 234567.",
      "C. The code compiles but does not print anything.",
      "D. The code compiles but prints stream references.",
      "E. The code runs infinitely.",
      "F. The code does not compile.",
      "G. The code throws an exception."
    ],
    "answer": [
      "F"
    ],
    "explanation": "13. F. If the map() and flatMap() calls were reversed, option B would be correct. In this case, the Stream created from the source is of type Stream<List>. Trying to use the addition operator (+) on a List is not supported in Java. Therefore, the code does not compile, and option F is correct."
  },
  {
    "id": 1014,
    "question": "14. Which of the following are true? (Choose all that apply.)\n4: Stream<Integer> s = Stream.of(1);\n5: IntStream is = s.boxed();\n6: DoubleStream ds = s.mapToDouble(x -> x);\n7: Stream<Integer> s2 = ds.mapToInt(x -> x);\n8: s2.forEach(System.out::print);",
    "options": [
      "A. Line 4 causes a compiler error.",
      "B. Line 5 causes a compiler error.",
      "C. Line 6 causes a compiler error.",
      "D. Line 7 causes a compiler error.",
      "E. Line 8 causes a compiler error.",
      "F. The code compiles but throws an exception at runtime.",
      "G. The code compiles and prints 1."
    ],
    "answer": [
      "B",
      "D"
    ],
    "explanation": "14. B, D. Line 4 creates a Stream and uses autoboxing to put the Integer wrapper of 1 inside. Line 5 does not compile because boxed() is available only on primitive streams like IntStream, not Stream<Integer>. This makes option B one answer. Line 6 converts to a double primitive, which works since Integer can be unboxed to a value that can be implicitly cast to a double. Line 7 does not compile for two reasons, making option D the second answer. First, converting from a double to an int would require an explicit cast. Also, mapToInt() returns an IntStream, so the data type of s2 is incorrect. The rest of the lines compile without issue."
  },
  {
    "id": 1015,
    "question": "15. Given the generic type String, the partitioningBy() collector creates a Map<Boolean, List<String>> when passed to collect() by default. When a downstream collector is passed to partitioningBy(), which return types can be created? (Choose all that apply.)",
    "options": [
      "A. Map<boolean, List<String>>",
      "B. Map<Boolean, List<String>>",
      "C. Map<Boolean, Map<String>>",
      "D. Map<Boolean, Set<String>>",
      "E. Map<Long, TreeSet<String>>",
      "F. None of the above"
    ],
    "answer": [
      "B",
      "D"
    ],
    "explanation": "15. B, D. Options A and C do not compile because they are invalid generic declarations. Primitives are not allowed as generics, and Map must have two generic type parameters. Option E is incorrect because partitioning only gives a Boolean key. Options B and D are correct because they return a Map with a Boolean key and a value type that can be customized to any Collection."
  },
  {
    "id": 1016,
    "question": "16. Which of the following statements are true about this code? (Choose all that apply.)\n20: Predicate<String> empty = String::isEmpty;\n21: Predicate<String> notEmpty = empty.negate();\n22:\n23: var result = Stream.generate(() -> \"\")\n24:     .limit(10)\n25:     .filter(notEmpty)\n26:     .collect(Collectors.groupingBy(k -> k))\n27:     .entrySet()\n28:     .stream()\n29:     .map(Entry::getValue)\n30:     .flatMap(Collection::stream)\n31:     .collect(Collectors.partitioningBy(notEmpty));\n32: System.out.println(result);",
    "options": [
      "A. It outputs {}.",
      "B. It outputs {false=[], true=[]}.",
      "C. If we changed line 31 from partitioningBy(notEmpty) to groupingBy(n -> n), it would output {}.",
      "D. If we changed line 31 from partitioningBy(notEmpty) to groupingBy(n -> n), it would output {false=[], true=[]}.",
      "E. The code does not compile.",
      "F. The code compiles but does not terminate at runtime."
    ],
    "answer": [
      "B",
      "C"
    ],
    "explanation": "16. B, C. First, this mess of code does compile. While it starts with an infinite stream on line 23, it becomes finite on line 24 thanks to limit(), making option F incorrect. The pipeline preserves only nonempty elements on line 25. Since there aren’t any of those, the pipeline is empty. Line 26 converts this to an empty map. Lines 27 and 28 create a Set with no elements and then another empty stream. Lines 29 and 30 convert the generic type of the Stream to List<String> and then String. Finally, line 31 gives us another Map<Boolean, List<String>>. The partitioningBy() operation always returns a map with two Boolean keys, even if there are no corresponding values. Therefore, option B is correct if the code is kept as is. By contrast, groupingBy() returns only keys that are actually needed, making option C correct if the code is modified on line 31."
  },
  {
    "id": 1017,
    "question": "17. What is the result of the following?\nvar s = DoubleStream.of(1.2, 2.4);\ns.peek(System.out::println).filter(x -> x> 2).count();\nA. 1\nB. 2\nC. 2.4\nD. 1.2 and 2.4\nE. There is no output.\nF. The code does not compile.\nG. An exception is thrown.",
    "options": [
      "A. 1",
      "B. 2",
      "C. 2.4",
      "D. 1.2 and 2.4",
      "E. There is no output.",
      "F. The code does not compile.",
      "G. An exception is thrown."
    ],
    "answer": [
      "D"
    ],
    "explanation": "17. D. The terminal operation is count(). Since there is a terminal operation, the intermediate operations run. The peek() operation comes before the filter(), so both numbers are printed, making option D the answer."
  },
  {
    "id": 1018,
    "question": "18. What is the output of the following?\n11: public class Paging {\n12:\nrecord Sesame(String name, boolean human) {\n13:     @Override public String toString() {\n14:         return name();\n15:     }\n16: }\n17: record Page(List<Sesame> list, long count) {}\n18:\n19: public static void main(String[] args) {\n20:     var monsters = Stream.of(new Sesame(\"Elmo\", false));\n21:     var people = Stream.of(new Sesame(\"Abby\", true));\n22:     printPage(monsters, people);\n23: }\n24:\n25: private static void printPage(Stream<Sesame> monsters,\n26:                             Stream<Sesame> people) {\n27:     Page page = Stream.concat(monsters, people)\n28:         .sorted()\n29:         // line X\n30:         .distinct()\n31:         .findAny()\n32:         .ifPresent(System.out::println);\n33: }\n34: }",
    "options": [
      "A. Page[list=[Abby], count=1]",
      "B. Page[list=[Abby], count=2]",
      "C. Page[list=[Elmo], count=1]",
      "D. Page[list=[Elmo], count=2]",
      "E. The code does not compile due to Stream.concat().",
      "F. The code does not compile due to Collectors.teeing().",
      "G. The code does not compile for another reason."
    ],
    "answer": [
      "D"
    ],
    "explanation": "18. D. This compiles, ruling out options E, F, and G. Since line 29 filters by names starting with E, that rules out options A and B. Finally, line 31 counts the entire list, which is of size 2, giving us option D as the answer."
  },
  {
    "id": 1019,
    "question": "19. What is the simplest way of rewriting this code?\nList<Integer> x = IntStream.range(1, 6)\n    .mapToObj(i -> i)\n    .collect(Collectors.toList());\nx.forEach(System.out::println);\nA. IntStream.range(1, 6);\nB. IntStream.range(1, 6).forEach(System.out::println);\nC. IntStream.range(1, 6).mapToObj(i -> i).forEach(System.out::println);\nD. None of the above is equivalent.\nE. The provided code does not compile.",
    "options": [
      "A. IntStream.range(1, 6);",
      "B. IntStream.range(1, 6).forEach(System.out::println);",
      "C. IntStream.range(1, 6).mapToObj(i -> i).forEach(System.out::println);",
      "D. None of the above is equivalent.",
      "E. The provided code does not compile."
    ],
    "answer": [
      "B"
    ],
    "explanation": "19. B. Both lists and streams have forEach() methods. There is no reason to collect into a list just to loop through it. Option A is incorrect because it does not contain a terminal operation or print anything. Options B and C both work. However, the question asks about the simplest way, which is option B."
  },
  {
    "id": 1020,
    "question": "20. Which of the following throw an exception when an Optional is empty? (Choose all that apply.)\nA. opt.orElse(\"\");\nB. opt.orElseGet(() -> \"\");\nC. opt.orElseThrow();\nD. opt.orElseThrow(() -> throw new Exception());\nE. opt.orElseThrow(RuntimeException::new);\nF. opt.get();\nG. opt.get(\"\");",
    "options": [
      "A. opt.orElse(\"\");",
      "B. opt.orElseGet(() -> \"\");",
      "C. opt.orElseThrow();",
      "D. opt.orElseThrow(() -> throw new Exception());",
      "E. opt.orElseThrow(RuntimeException::new);",
      "F. opt.get();",
      "G. opt.get(\"\");"
    ],
    "answer": [
      "C",
      "E",
      "F"
    ],
    "explanation": "20. C, E, F. Options A and B compile and return an empty string without throwing an exception. Option G does not compile as the get() method does not take a parameter. Options C and F throw a NoSuchElementException. Option E throws a RuntimeException. Option D looks correct but will compile only if the throw is removed. Remember, the orElseThrow() should get a lambda expression or method reference that returns an exception, not one that throws an exception."
  },
  {
    "id": 1021,
    "question": "21. What is the output of the following?\nvar spliterator = Stream.generate(() -> \"x\")\n    .spliterator();\nspliterator.tryAdvance(System.out::print);\nvar split = spliterator.trySplit();\nsplit.tryAdvance(System.out::print);\nA. x\nB. xx\nC. A long list of x’s.\nD. There is no output.\nE. The code does not compile.\nF. The code compiles but does not terminate at runtime.",
    "options": [
      "A. x",
      "B. xx",
      "C. A long list of x’s.",
      "D. There is no output.",
      "E. The code does not compile.",
      "F. The code compiles but does not terminate at runtime."
    ],
    "answer": [
      "B"
    ],
    "explanation": "21. B. We start with an infinite stream where each element is x. The spliterator() method is a terminal operation since it returns a Spliterator rather than a Stream. The tryAdvance() method gets the first element and prints a single x. The trySplit() method takes a large number of elements from the stream. Since this is an infinite stream, it doesn’t attempt to take half. Then tryAdvance() is called on the new split variable, and another x is printed. Since there are two values printed, option B is correct."
  }
]
